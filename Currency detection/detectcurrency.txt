from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import io
import time
import numpy as np

from PIL import Image
from tflite_runtime.interpreter import Interpreter


import cv2



def load_labels(path):
  with open(path, 'r') as f:
    return {i: line.strip() for i, line in enumerate(f.readlines())}


def set_input_tensor(interpreter, image):
  tensor_index = interpreter.get_input_details()[0]['index']
  input_tensor = interpreter.tensor(tensor_index)()[0]
  input_tensor[:, :] = image


def classify_image(interpreter, image, top_k=1):
 
  set_input_tensor(interpreter, image)
  interpreter.invoke()
  output_details = interpreter.get_output_details()[0]
  output = np.squeeze(interpreter.get_tensor(output_details['index']))

 
  if output_details['dtype'] == np.uint8:
    scale, zero_point = output_details['quantization']
    output = scale * (output - zero_point)

  ordered = np.argpartition(-output, top_k)
  return [(i, output[i]) for i in ordered[:top_k]]
  

font = cv2.FONT_HERSHEY_SIMPLEX
  

org = (50, 50)
  

fontScale = 1
   

color = (255, 0, 0)
  

thickness = 2


def main():
  parser = argparse.ArgumentParser(
      formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument(
      '--model', help='File path of .tflite file.', required=True)
  parser.add_argument(
      '--labels', help='File path of labels file.', required=True)
  args = parser.parse_args()

  labels = load_labels(args.labels)

  interpreter = Interpreter(args.model)
  interpreter.allocate_tensors()
  _, height, width, _ = interpreter.get_input_details()[0]['shape']
  
  cap = cv2.VideoCapture(0)

  while cap.isOpened(): 
    ret, frame = cap.read()
    
    print(frame.shape, type(frame))
    print(width, height)
    image = cv2.resize(frame, dsize=(width, height), interpolation = cv2.INTER_CUBIC)
    start_time = time.time()
    results = classify_image(interpreter, image)
    elapsed_ms = (time.time() - start_time) * 1000
    label_id, prob = results[0]
    print('%s %.2f\n%.1fms' % (labels[label_id], prob, elapsed_ms))
    image = cv2.putText(frame, '%s %.2f %.1fms' % (labels[label_id], prob, elapsed_ms), org, font, fontScale, color, thickness, cv2.LINE_AA)
    cv2.imshow('Webcam', frame)

    
    if cv2.waitKey(1) & 0xFF == ord('q'): 
      break

if __name__ == '__main__':
  main()